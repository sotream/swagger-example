openapi: 3.0.0
info:
  title: Users API
  description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
  version: 1.0.7
servers:
  - url: 'http://localhost:3000/api/v1'
    description: Users service version 1
  - url: '{protocol}://localhost:{port}/api/v2'
    description: Users service version 2
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      port:
        enum:
          - 3000
          - 4000
        default: 3000

paths:
  /auth/login:
    post:
      summary: Authenticate user
      tags:
        - Auth
      requestBody:
        description: Sign up **user**
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestBody'
      responses:
        200:
          description: Users authentication info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'   
        401:
          description: User not authorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedResponse'

  /users:
    post:
      summary: Create user
      tags:
        - Users
      requestBody:
        description: Sign up **user**
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestBody'
      responses:
        201:
          headers:
            x-api-version:
              schema:
                type: string
              description: Api version
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: User validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'    

    get:
      summary: Return a list of users
      description: You also can query users by filter
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: 'filter'
          schema:
            type: string
          required: false
          description: User email to filter users
        - in: query
          name: 'limit'
          schema:
            type: integer
          required: false
          description: User query page limit
      responses:
        200:
          description: Array of users
          headers:
            x-api-version:
              schema:
                type: string
              description: Api version
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - 'ok'
                      - 'error'
                    example: 'ok'
                  data:
                    type: array
                    minItems: 1
                    items:
                      $ref: '#/components/schemas/User'
        401:
          description: User not authorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedResponse'

  /users/{id}:
    get:
      summary: Return a user by id
      description: Docs description in *CommonMark*
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: 'id'
          schema:
            type: integer
          required: true
          description: User id
      responses:
        200:
          description: Users entity
          headers:
            x-api-version:
              schema:
                type: string
              description: Api version
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - 'ok'
                      - 'error'
                    example: 'ok'
                  data:
                    $ref: '#/components/schemas/User'
        401:
          description: User not authorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedResponse'
        404:
          description: User not authorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'

    put:
      summary: Update user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: 'id'
          schema:
            type: integer
          required: true
          description: User id
      requestBody:
        description: Update **user**
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestUpdateBody'
      responses:
        200:
          description: Updated user
          headers:
            x-api-version:
              schema:
                type: string
              description: Api version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        401:
          description: User not authorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedResponse'
        404:
          description: User not authorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'

    delete:
      summary: Delete user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: 'id'
          schema:
            type: integer
          required: true
          description: User id
      responses:
        204:
          description: User deleted
          headers:
            x-api-version:
              schema:
                type: string
              description: Api version
        400:
          description: User validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        401:
          description: User not authorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedResponse'      
        404:
          description: User not authorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: The user ID
          example: 1
        name:
          type: string
          description: The user full name
          example: John Dou
        email:
          type: string
          description: The user email
          example: jdou@example.com
        age:
          type: integer
          description: The user age
          example: 27

    UserRequestBody:
      type: object
      properties:
        name:
          type: string
          required: true
          minLength: 3
          maxLength: 25
          description: The user full name
          example: Jane Dou
        email:
          type: string
          format: email
          required: true
          description: The user email
          example: jadou@test.com
        password:
          type: string
          required: true
          minLength: 8
          description: The user password
          example: 'super-password'
        age:
          type: integer
          required: true
          minimum: 18
          exclusiveMinimum: false
          maximum: 100
          exclusiveMaximum: true
          description: The user age
          example: 25

    UserRequestUpdateBody:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 25
          description: The user full name
          example: Jackie Smith
        email:
          type: string
          format: email
          description: The user email
          example: jackie.smith@test.com
        password:
          type: string
          minLength: 8
          description: The user password
          example: 'password'
        age:
          type: integer
          minimum: 18
          exclusiveMinimum: false
          maximum: 100
          exclusiveMaximum: true
          description: The user age
          example: 31

    LoginRequestBody:
      type: object
      properties:
        email:
          type: string
          format: email
          required: true
          description: The user email
          example: jdou@test.com
        password:
          type: string
          required: true
          minLength: 3
          description: The user password
          example: '12345678'

    UserResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - 'ok'
            - 'error'
          example: 'ok'
        data:
          $ref: '#/components/schemas/User'

    LoginResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - 'ok'
            - 'error'
          example: 'ok'
        data:
          type: object
          properties:
            accessToken:
              type: string
              required: true
              description: Access token
              example: eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Impkb3VAdGVzdC5jb20iLCJpYXQiOjE2OTM2NTE5ODUsImV4cCI6MTY5MzY1NTU4NX0.asGtJQ1Qu6xU0l0bXF1zLyzyFq_3bTE3vXxcQxZCr_K_2cl6sg9NWyLA_cmPfenn2i4DdF_wW67vQ4oCMmA8DQ

    NotAuthorizedResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - 'error'
          required: true
          description: Request status
          example: error
        data:
          type: object
          properties: 
            message:
              type: string
              required: true
              description: Error message
              example: "Wrong credentials"

    NotFoundResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - 'error'
          required: true
          description: Request status
          example: error
        data:
          type: object
          properties: 
            message:
              type: string
              required: true
              description: Error message
              example: "User with id '1' not found"

    BadRequestResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - 'error'
          required: true
          description: Request status
          example: error
        data:
          type: object
          properties: 
            message:
              type: string
              required: true
              description: Error message
              example: "User params are not valid"
