openapi: 3.0.3

info:
  title: Users API
  description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
  version: 0.0.0
servers:
  - url: 'http://localhost:3000/api/v1'
    description: Users service version 1
  - url: '{protocol}://localhost:{port}/api/v2'
    description: Users service version 2
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      port:
        enum:
          - 3000
          - 4000
        default: 3000

paths:
  /auth/login:
    post:
      summary: Authenticate user
      tags:
        - Auth
      requestBody:
        description: Sign up **user**
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestBody'
      responses:
        200:
          description: Users authentication info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'   
        401:
          description: User not authorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedResponse'

  /users:
    post:
      summary: Create user
      tags:
        - Users
      requestBody:
        description: Sign up **user**
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestBody'
      responses:
        201:
          headers:
            x-api-version:
              $ref: '#/components/headers/xApiVersion'
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithTokenResponse'
        400:
          description: User validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'    

    get:
      summary: Return a list of users
      description: You also can query users by filter
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/filterParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        200:
          description: Array of users
          headers:
            x-api-version:
              $ref: '#/components/headers/xApiVersion'
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - 'ok'
                    example: 'ok'
                  data:
                    type: array
                    minItems: 1
                    items:
                      $ref: '#/components/schemas/User'
        401:
          description: User not authorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedResponse'

  /users/{id}:
    get:
      summary: Return a user by id
      description: Docs description in *CommonMark*
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        200:
          description: Users entity
          headers:
            x-api-version:
              $ref: '#/components/headers/xApiVersion'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        401:
          description: User not authorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedResponse'
        404:
          description: User not authorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'

    put:
      summary: Update user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      requestBody:
        description: Update **user**
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestUpdateBody'
      responses:
        200:
          description: Updated user
          headers:
            x-api-version:
              $ref: '#/components/headers/xApiVersion'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        401:
          description: User not authorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedResponse'
        404:
          description: User not authorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'

    delete:
      summary: Delete user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        204:
          description: User deleted
          headers:
            x-api-version:
              $ref: '#/components/headers/xApiVersion'
        400:
          description: User validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        401:
          description: User not authorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedResponse'      
        404:
          description: User not authorized error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    filterParam:
      name: 'filter'
      in: query
      schema:
        type: string
      required: false
      description: User email or name
    limitParam:
      name: limit
      in: query
      schema:
        type: integer
      required: false
      description: User query page limit
    idParam:
        name: 'id'
        in: path
        schema:
          type: integer
        required: true
        description: User id

  headers:
    xApiVersion:
      schema:
        type: string
      description: Api version

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: The user ID
        name:
          type: string
          description: The user full name
          example: John Dou
        email:
          type: string
          description: The user email
          example: jdou@example.com
        age:
          type: integer
          description: The user age
      example:
        id: 1
        name: John Dou
        email: jdou@example.com
        age: 27

    UserRequestBody:
      type: object
      required:
        - name
        - email
        - password
        - age
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 25
          description: The user full name
          example: Jane Dou
        email:
          type: string
          format: email
          description: The user email
          example: jadou@test.com
        password:
          type: string
          minLength: 8
          description: The user password
          example: 'super-password'
        age:
          type: integer
          minimum: 18
          exclusiveMinimum: false
          maximum: 100
          exclusiveMaximum: true
          description: The user age
          example: 25

    UserRequestUpdateBody:
      allOf:
        - $ref: '#/components/schemas/UserRequestBody'
        - type: object
          required: false

    LoginRequestBody:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: The user email
        password:
          type: string
          minLength: 3
          description: The user password
      example:
        email: jdou@test.com
        password: '12345678'

    UserResponse:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
          enum:
            - 'ok'
          example: 'ok'
        data:
          allOf:
            - $ref: '#/components/schemas/User'
            - type: object
              required:
                - id
                - name
                - email
                - age

    UserWithTokenResponse:
      allOf:
        - $ref: '#/components/schemas/UserResponse'
        - type: object
          properties:
            data:
              allOf:
              - $ref: '#/components/schemas/User'
              - type: object
                required:
                  - id
                  - name
                  - email
                  - age
                  - accessToken
                properties:
                  accessToken:
                    type: string
                    required: true
                    description: Access token
                    example: 'eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Impkb3VAdGVzdC5jb20iLCJpYXQiOjE2OTM2NTE5ODUsImV4cCI6MTY5MzY1NTU4NX0.asGtJQ1Qu6xU0l0bXF1zLyzyFq_3bTE3vXxcQxZCr_K_2cl6sg9NWyLA_cmPfenn2i4DdF_wW67vQ4oCMmA8DQ'

    LoginResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - 'ok'
          example: 'ok'
        data:
          type: object
          properties:
            accessToken:
              type: string
              required: true
              description: Access token
              example: eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Impkb3VAdGVzdC5jb20iLCJpYXQiOjE2OTM2NTE5ODUsImV4cCI6MTY5MzY1NTU4NX0.asGtJQ1Qu6xU0l0bXF1zLyzyFq_3bTE3vXxcQxZCr_K_2cl6sg9NWyLA_cmPfenn2i4DdF_wW67vQ4oCMmA8DQ

    BaseErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - 'error'
          required: true
          description: Request status
        data:
          type: object
          properties: 
            message:
              type: string
              required: true
              description: Error message
    
    NotAuthorizedResponse:
      allOf:
        - $ref: '#/components/schemas/BaseErrorResponse'
        - type: object
          example:
            status: 'error'
            data:
              message: 'Wrong credentials'

    NotFoundResponse:
      allOf:
        - $ref: '#/components/schemas/BaseErrorResponse'
        - type: object
          example:
            status: 'error'
            data:
              message: "User with id '1' not found"

    BadRequestResponse:
      allOf:
        - $ref: '#/components/schemas/BaseErrorResponse'
        - type: object
          example:
            status: 'error'
            data:
              message: 'User params are not valid'